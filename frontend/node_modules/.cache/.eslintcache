[{"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\index.tsx":"1","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\App.tsx":"3","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HomePage\\HomePage.tsx":"4","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\AdminPage.tsx":"5","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\EditVacation.tsx":"6","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\ReportPage.tsx":"7","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\AddVacation.tsx":"8","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HolidaysPage\\HolidaysPage.tsx":"9","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HolidaysPage\\Pagination.tsx":"10","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\AdminCard.tsx":"11","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HolidaysPage\\HolidayCard.tsx":"12","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\Nav\\Nav.tsx":"13"},{"size":554,"mtime":1690199168980,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1690199168684,"results":"16","hashOfConfig":"15"},{"size":1031,"mtime":1690784007255,"results":"17","hashOfConfig":"15"},{"size":5297,"mtime":1690993330258,"results":"18","hashOfConfig":"15"},{"size":8079,"mtime":1690798722106,"results":"19","hashOfConfig":"15"},{"size":10471,"mtime":1690813169934,"results":"20","hashOfConfig":"15"},{"size":3513,"mtime":1690812976658,"results":"21","hashOfConfig":"15"},{"size":7208,"mtime":1690796002966,"results":"22","hashOfConfig":"15"},{"size":9756,"mtime":1690988062869,"results":"23","hashOfConfig":"15"},{"size":1011,"mtime":1690810085148,"results":"24","hashOfConfig":"15"},{"size":3001,"mtime":1690776141273,"results":"25","hashOfConfig":"15"},{"size":3305,"mtime":1690988051004,"results":"26","hashOfConfig":"15"},{"size":2147,"mtime":1690797800989,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"yygw5h",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"31"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"31"},"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\index.tsx",[],[],[],"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\App.tsx",[],[],"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HomePage\\HomePage.tsx",[],[],"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\AdminPage.tsx",["75","76","77","78","79"],[],"import React, { FC, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AdminCard from './AdminCard';\r\nimport Pagination from '../HolidaysPage/Pagination';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircleInfo } from '@fortawesome/free-solid-svg-icons';\r\nimport Swal from 'sweetalert2';\r\nimport Nav from '../Nav/Nav';\r\n\r\ninterface Holiday {\r\n  vacation_id: number;\r\n  vacation_description: string;\r\n  vacation_start: string;\r\n  vacation_end: string;\r\n  vacation_image_file_name: string;\r\n  vacation_destination: string;\r\n  price: number;\r\n  follower_count: number;\r\n  isFollowed: boolean;\r\n  \r\n}\r\n\r\ninterface Vacation {\r\n  vacation_id: number;\r\n  vacation_description: string;\r\n  vacation_start: string;\r\n  vacation_end: string;\r\n  price: number;\r\n  vacation_image_file_name: string;\r\n  vacation_image_url: string;\r\n  isFollowed: boolean;\r\n  startDate: string;\r\n  endDate: string;\r\n  vacation_destination: string;\r\n  follower_count: number;\r\n  userId: number;\r\n}\r\n\r\ninterface UserData {\r\n  userId: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nconst AdminPage: FC = () => {\r\n    const [vacations, setVacations] = useState<Vacation[]>([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [itemsPerPage] = useState(10);\r\n    const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);\r\n    const navigate = useNavigate();\r\n    const [followedVacations, setFollowedVacations] = useState<Vacation[]>([]);\r\n    const [sortByStartDate, setSortByStartDate] = useState(true);\r\n    const [report, setReport] = useState<number>(0);\r\n    \r\n\r\n\r\n\r\n    const addVacation = () => {\r\n        navigate('/addvacation');\r\n    }\r\n\r\n    const editCard = (holidayId: number) => {\r\n      console.log(holidayId);\r\n      navigate(`/editvacation/${holidayId}`);\r\n    };\r\n\r\n    const reportPage = () => {\r\n      navigate('/report');\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n      const token = localStorage.getItem('token');\r\n      const role = localStorage.getItem('role');\r\n  \r\n      if (token && role === 'admin') {\r\n        fetchUserData()\r\n          .then((userData) => {\r\n            if (userData) {\r\n              setLoggedInUser(userData);\r\n            } else {\r\n              console.error('User data is null');\r\n              navigate('/');\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching user data:', error);\r\n            navigate('/');\r\n          });\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    }, [navigate]);\r\n    \r\n    useEffect(() => {\r\n      if (loggedInUser) {\r\n        fetchVacations();\r\n        fetchReport();\r\n      }\r\n    }, [loggedInUser]);\r\n      \r\n    const fetchUserData = async (): Promise<UserData | null> => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n\r\n        const response = await fetch('http://localhost:3000/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user data');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (error) {\r\n        console.error('Failed to fetch user data', error);\r\n        return null;\r\n      }\r\n    };\r\n  \r\n  const fetchVacations = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n  \r\n      const response = await fetch('http://localhost:3000/vacations', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        const error = await response.text();\r\n        throw new Error(`Fetch failed: ${error}`);\r\n      }\r\n      let data = await response.json();\r\n      setVacations(data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch vacations', error);\r\n    }\r\n    };\r\n\r\n    const deleteVacation = async (holidayId: number) => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`http://localhost:3000/vacations/${holidayId}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n        if (!response.ok) {\r\n          const error = await response.text();\r\n          throw new Error(`Delete failed: ${error}`);\r\n        }\r\n        fetchVacations();      \r\n        Swal.fire({\r\n          title: 'Vacation deleted successfully',\r\n          icon: 'success',\r\n          showConfirmButton: false,\r\n          timer: 2500,\r\n        });\r\n      } catch (error) {\r\n        console.error('Delete failed', error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    const deleteCard = (holiday : number) => {\r\n      Swal.fire({\r\n        title: 'Are you sure you want to delete this vacation?',\r\n        text: \"You won't be able to revert this!\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#ff0000',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Yes, delete it!',\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          deleteVacation(holiday);\r\n        }\r\n      });\r\n    };\r\n\r\n\r\n \r\n\r\n    const fetchReport = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n  \r\n        const response = await fetch('http://localhost:3000/report', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (!response.ok) {\r\n          const error = await response.text();\r\n          throw new Error(`Fetch failed: ${error}`);\r\n        }\r\n        const data = await response.json();\r\n        setVacations(data);\r\n        const reportValue = data ? data : 0;\r\n        setReport(reportValue);\r\n      } catch (error) {\r\n        console.error('Failed to fetch vacations', error);\r\n      }\r\n    };\r\n\r\n    const openFilterDialog = async () => {\r\n      const { value } = await Swal.fire({\r\n        title: 'More options',\r\n        input: 'select',\r\n        inputOptions: {\r\n          AddVacation: 'Add Vacation',\r\n          reportPage: 'Report Page'\r\n        },\r\n        inputPlaceholder: 'Select Option',\r\n        showCancelButton: true,\r\n      });\r\n      if (value === 'AddVacation') {\r\n        addVacation();\r\n      }\r\n      if (value === 'reportPage') {\r\n        reportPage();\r\n      }\r\n    };\r\n\r\n\r\n\r\n    \r\n    \r\n    vacations.sort((a: Vacation, b: Vacation) => {\r\n      if (sortByStartDate) {\r\n          return new Date(a.vacation_start).getTime() - new Date(b.vacation_start).getTime();\r\n      } else {\r\n          return new Date(a.vacation_end).getTime() - new Date(b.vacation_end).getTime();\r\n      }\r\n  });\r\n\r\n    \r\n      const totalFilteredItems = vacations.length;\r\n      const totalPages = Math.ceil(totalFilteredItems / itemsPerPage);\r\n      const adjustedCurrentPage = Math.min(currentPage, totalPages);\r\n      const indexOfLastItem = adjustedCurrentPage * itemsPerPage;\r\n      const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n      const currentItems = vacations.slice(indexOfFirstItem, indexOfLastItem);\r\n      const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\r\n    \r\n      return (\r\n        <>\r\n          <Nav />\r\n          <div className=\"filter\">\r\n          <h3 onClick={openFilterDialog}>More Options <FontAwesomeIcon icon={faCircleInfo} /></h3>   \r\n          </div>       \r\n          <div>\r\n            <div className=\"card-area\">\r\n              {currentItems.map((vacation, index) => (\r\n                <AdminCard\r\n                  key={index}\r\n                  holiday={vacation}\r\n                  deleteCard={deleteCard}\r\n                  editCard={editCard}\r\n                />\r\n              ))}\r\n            </div>\r\n            <Pagination\r\n              itemsPerPage={itemsPerPage}\r\n              totalItems={totalFilteredItems}\r\n              paginate={paginate}\r\n              currentPage={adjustedCurrentPage}\r\n            />\r\n          </div>\r\n        </>\r\n      );\r\n    };\r\nexport default AdminPage;\r\n","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\EditVacation.tsx",["80","81","82","83","84","85"],[],"import React, { FC, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\nimport Nav from '../Nav/Nav';\r\n\r\ninterface VacationDetails {\r\n  vacation_id: number;\r\n  vacation_description: string;\r\n  vacation_start: string;\r\n  vacation_end: string;\r\n  vacation_image_file_name: File | null;\r\n  vacation_destination: string;\r\n  price: number;\r\n}\r\n\r\ninterface UserData {\r\n  userId: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\ntype Params = {\r\n    holidayId: string;\r\n};\r\n\r\nconst EditVacation: FC = () => {\r\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\r\n  const [currentImageURL, setCurrentImageURL] = useState<string | null>(null);\r\n  const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);\r\n  const navigate = useNavigate();\r\n  const [vacation, setVacation] = useState<VacationDetails>({\r\n    vacation_id: 0,\r\n    vacation_description: '',\r\n    vacation_start: '',\r\n    vacation_end: '',\r\n    vacation_image_file_name: null,\r\n    vacation_destination: '',\r\n    price: 0,\r\n  });\r\n    const { holidayId } = useParams<Params>();\r\n    \r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const role = localStorage.getItem('role');\r\n\r\n    if (token && role === 'admin') {\r\n      fetchUserData()\r\n        .then((userData) => {\r\n          if (userData) {\r\n            setLoggedInUser(userData);\r\n            fetchVacationDetails(); // Fetch the vacation details after fetching user data\r\n          } else {\r\n            console.error('User data is null');\r\n            navigate('/');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching user data:', error);\r\n          navigate('/');\r\n        });\r\n    } else {\r\n      navigate('/');\r\n    }\r\n  }, [navigate]);\r\n\r\n\r\n\r\n  const fetchUserData = async (): Promise<UserData | null> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      const response = await fetch('http://localhost:3000/user', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch user data', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!holidayId || isNaN(Number(holidayId))) {\r\n      console.error('Invalid vacation ID');\r\n      console.log(holidayId);\r\n      navigate('/admin');\r\n    } else {\r\n      fetchVacationDetails();\r\n    }\r\n  }, [holidayId, navigate]);\r\n\r\n\r\n  const fetchVacationDetails = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`http://localhost:3000/vacations/${holidayId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          console.error('Vacation not found');\r\n          navigate('/admin');\r\n        } else {\r\n          throw new Error('Failed to fetch vacation details');\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      const startDate = new Date(data.vacation_start);\r\n      startDate.setDate(startDate.getDate() + 1);\r\n      const adjustedStartDate = startDate.toISOString().substring(0, 10);\r\n    \r\n      const endDate = new Date(data.vacation_end);\r\n      endDate.setDate(endDate.getDate() + 1);\r\n      const adjustedEndDate = endDate.toISOString().substring(0, 10);\r\n    \r\n      setVacation({\r\n        vacation_id: data.vacation_id,\r\n        vacation_description: data.vacation_description,\r\n        vacation_start: adjustedStartDate,\r\n        vacation_end: adjustedEndDate,\r\n        vacation_image_file_name: data.vacation_image_file_name,\r\n        vacation_destination: data.vacation_destination,\r\n        price: data.price,\r\n      });\r\n      const imageUrl = data.vacation_image_file_name ? `http://localhost:3000/vacation_images/${data.vacation_image_file_name}` : null;\r\n      setCurrentImageURL(imageUrl);\r\n      console.log(data.vacation_image_file_name);\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to fetch vacation details', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setVacation({\r\n      ...vacation,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    console.log(vacation);\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      const selectedImage = e.target.files[0];\r\n      setVacation({\r\n        ...vacation,\r\n        vacation_image_file_name: selectedImage,\r\n      });\r\n  \r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setImagePreview(reader.result as string);\r\n      };\r\n  \r\n      reader.readAsDataURL(selectedImage);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleFileUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append('image', vacation.vacation_image_file_name as File);\r\n    console.log('File selected:', vacation.vacation_image_file_name);\r\n  \r\n    console.log('Sending request to upload the file...');\r\n    const response = await fetch('http://localhost:3000/api/vacations/upload/update', {\r\n        method: 'POST',\r\n        body: formData,\r\n    });\r\n    console.log('Got response from the server' + response);\r\n    console.log(formData);\r\n\r\n    \r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n        console.log('File was uploaded successfully');\r\n        return data.filename;  // return the filename\r\n    } else {\r\n        console.log('File upload failed');\r\n        throw new Error(data.error || 'Network response was not ok');\r\n    }\r\n  }\r\n  \r\n\r\n  const handleUpdateVacation = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      let filename;\r\n      if (vacation.vacation_image_file_name) {\r\n        filename = await handleFileUpload();  // Upload the file and get the filename\r\n      }\r\n  \r\n      const formData = new FormData();\r\n      formData.append('id', vacation.vacation_id.toString());\r\n      formData.append('destination', vacation.vacation_destination);\r\n      formData.append('description', vacation.vacation_description);\r\n      formData.append('startDate', vacation.vacation_start);\r\n      formData.append('endDate', vacation.vacation_end);\r\n      formData.append('price', vacation.price.toString());\r\n      if (vacation.vacation_image_file_name) {\r\n        formData.append('imageFileName', vacation.vacation_image_file_name);\r\n      }\r\n  \r\n      const response = await fetch(`http://localhost:3000/vacations/${holidayId}`, {\r\n        method: 'PUT',\r\n        body: formData,\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      console.log(response);\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Network response was not ok');\r\n      }\r\n\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: data.message,\r\n        icon: 'success',\r\n        confirmButtonText: 'Ok',\r\n      });\r\n\r\n      // Navigate back to the admin page after successful update\r\n      navigate('/admin');\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        Swal.fire({\r\n          title: 'Error!',\r\n          text: error.message,\r\n          icon: 'error',\r\n          confirmButtonText: 'Ok',\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n \r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"mainAdd\">\r\n          <label className='editLabel'>Edit Vacation</label>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Destination\"\r\n                name=\"vacation_destination\"\r\n                value={vacation.vacation_destination}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                name=\"vacation_description\"\r\n                value={vacation.vacation_description}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"date\"\r\n                placeholder=\"Start Date\"\r\n                name=\"vacation_start\"\r\n                value={vacation.vacation_start}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"date\"\r\n                placeholder=\"End Date\"\r\n                name=\"vacation_end\"\r\n                value={vacation.vacation_end}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Price\"\r\n                name=\"price\"\r\n                value={vacation.price}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"imageFileName\" className=\"custom-file-upload\">\r\n                {imagePreview ? (\r\n                  <img src={imagePreview} alt=\"Vacation Preview\" />\r\n                ) : currentImageURL ? (\r\n                  <img src={currentImageURL} alt=\"Current Vacation Image\" />\r\n                ) : (\r\n                  'Select or Change Image'\r\n                )}\r\n              </label>\r\n              <input\r\n                className=\"input__file_edit\"\r\n                type=\"file\"\r\n                name=\"imageFileName\"\r\n                id=\"imageFileName\"\r\n                accept=\"image/*\"\r\n                onChange={handleFileChange}\r\n              />\r\n            </div>\r\n\r\n            \r\n            <button onClick={handleUpdateVacation}>Update Vacation</button>\r\n            <button className=\"return-btn\" onClick={() => navigate('/admin')}>\r\n              Return\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditVacation;\r\n","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\ReportPage.tsx",["86"],[],"import React, { useEffect, useState } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, LabelList, ResponsiveContainer } from 'recharts';\r\nimport './ReportPage.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface ReportData {\r\n  vacation_destination: string;\r\n  follower_count: number;\r\n}\r\n\r\ninterface UserData {\r\n    userId: number;\r\n    first_name: string;\r\n    last_name: string;\r\n    email: string;\r\n    role: string;\r\n  }\r\n\r\nconst ReportPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [reportData, setReportData] = useState<ReportData[]>([]);\r\n  const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const role = localStorage.getItem('role');\r\n\r\n    if (token && role === 'admin') {\r\n      fetchUserData()\r\n        .then((userData) => {\r\n          if (userData) {\r\n            setLoggedInUser(userData);\r\n          } else {\r\n            console.error('User data is null');\r\n            navigate('/');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching user data:', error);\r\n          navigate('/');\r\n        });\r\n    } else {\r\n      navigate('/');\r\n    }\r\n  }, [navigate]);\r\n\r\n    \r\n  const fetchUserData = async (): Promise<UserData | null> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      const response = await fetch('http://localhost:3000/user', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch user data', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/report')\r\n      .then(response => response.json())\r\n      .then(data => setReportData(data))\r\n      .catch(error => console.error('Error:', error));\r\n  }, []);\r\n\r\n  const handleDownloadCSV = () => {\r\n    let csvContent = 'destination,followers\\n';\r\n    csvContent += reportData.map(vacation => `${vacation.vacation_destination},${vacation.follower_count}`).join('\\n');\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = 'report.csv';\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div className='report-container'>\r\n      <h1>Vacation Report</h1>\r\n      \r\n        <div className='chart-container'>\r\n        <ResponsiveContainer width=\"100%\" aspect={4/3}>\r\n            <BarChart\r\n                data={reportData}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"5\" />\r\n                <XAxis dataKey=\"vacation_destination\"  />\r\n                <YAxis  />\r\n                <Tooltip />\r\n                <Bar dataKey=\"follower_count\"  fill=\"#82bdca\">\r\n                <LabelList dataKey=\"follower_count\" position=\"top\" />\r\n                </Bar>\r\n            </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n\r\n        <div className='button-container'>\r\n        <button onClick={handleDownloadCSV}>Download CSV</button>\r\n        <button className=\"return-btn\" onClick={() => navigate('/admin')}>\r\n            Return\r\n        </button>   \r\n\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportPage;\r\n","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\AddVacation.tsx",["87","88"],[],"import React, { FC, useState, ChangeEvent, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './AddVacation.css';\r\nimport Swal from 'sweetalert2';\r\nimport Nav from '../Nav/Nav';\r\n\r\ninterface UserData {\r\n  userId: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\ninterface Credentials {\r\n    destination: string;\r\n    description: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    price: string;\r\n    imageFileName?: File | null;\r\n}\r\n\r\nconst AddVacation: FC = () => {\r\n  const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);\r\n  const navigate = useNavigate();\r\n  const [credentials, setCredentials] = useState<Credentials>({\r\n    destination: '',\r\n    description: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    price: '',\r\n    imageFileName: null,\r\n  });\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCredentials({\r\n      ...credentials,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n        setCredentials({\r\n            ...credentials,\r\n            imageFileName: e.target.files[0],\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const role = localStorage.getItem('role');\r\n\r\n    if (token && role === 'admin') {\r\n      fetchUserData()\r\n        .then((userData) => {\r\n          if (userData) {\r\n            setLoggedInUser(userData);\r\n          } else {\r\n            console.error('User data is null');\r\n            navigate('/');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching user data:', error);\r\n          navigate('/');\r\n        });\r\n    } else {\r\n      navigate('/');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const fetchUserData = async (): Promise<UserData | null> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      const response = await fetch('http://localhost:3000/user', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch user data', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = async () => {\r\n    \r\n    if (!credentials.imageFileName) {\r\n      throw new Error('File is not selected');\r\n    }\r\n  \r\n    const formData = new FormData();\r\n    formData.append('image', credentials.imageFileName);\r\n    console.log('File selected:', credentials.imageFileName.name);\r\n  \r\n    console.log('Sending request to upload the file...');\r\n    const response = await fetch('http://localhost:3000/api/vacations/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n    });\r\n    console.log('Got response from the server' + response);\r\n    console.log(formData);\r\n\r\n    \r\n    const data = await response.json();\r\n    console.log(data);\r\n    if (response.ok) {\r\n        console.log('File was uploaded successfully');\r\n        return data.filename;  // return the filename\r\n    } else {\r\n        console.log('File upload failed');\r\n        throw new Error(data.error || 'Network response was not ok');\r\n    }\r\n  }\r\n  \r\n\r\n  const handleAddVacation = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try { \r\n        const filename = await handleFileUpload();   // get the filename from file upload\r\n\r\n        // replace imageFileName in the credentials with the returned filename\r\n        const credentialsWithFilename = { ...credentials, imageFileName: filename };\r\n        \r\n        const response = await fetch('http://localhost:3000/api/vacations', {\r\n            method: 'POST',\r\n            body: JSON.stringify(credentialsWithFilename),   // use the new credentials object\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n  \r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(data.error || 'Network response was not ok');\r\n        }\r\n    \r\n        if (data.error) {\r\n          Swal.fire({\r\n              title: 'Error!',\r\n              text: data.error,\r\n              icon: 'error',\r\n              confirmButtonText: 'Ok',\r\n            });\r\n          console.log(data.error);\r\n        } else {\r\n          Swal.fire({\r\n            title: 'Success!',\r\n            text: data.message,\r\n            icon: 'success',\r\n            confirmButtonText: 'Ok',\r\n          });\r\n          setCredentials({ destination:'', description: '', startDate: '', endDate: '', price: '', imageFileName: null });\r\n        }\r\n      } catch (error) {\r\n        if (error instanceof Error) {\r\n          Swal.fire({\r\n            title: 'Error!',\r\n            text: error.message,\r\n            icon: 'error',\r\n            confirmButtonText: 'Ok',\r\n          });\r\n        }\r\n      }\r\n  };\r\n\r\n  return (\r\n<>\r\n    <div className=\"wrap\">\r\n        \r\n        <div className=\"mainAdd\">\r\n            <label>Add Vacation</label>\r\n\r\n            <form>\r\n            <div className=\"form-group\">\r\n                <input\r\n                type=\"text\"\r\n                placeholder=\"Destination\"\r\n                name=\"destination\"\r\n                value={credentials.destination}\r\n                onChange={handleInputChange}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                name=\"description\"\r\n                value={credentials.description}\r\n                onChange={handleInputChange}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input\r\n                type=\"date\"\r\n                placeholder=\"Start Date\"\r\n                name=\"startDate\"\r\n                value={credentials.startDate}\r\n                onChange={handleInputChange}/>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <input\r\n                type=\"date\"\r\n                placeholder=\"End Date\"\r\n                name=\"endDate\"\r\n                value={credentials.endDate}\r\n                onChange={handleInputChange}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input\r\n                type=\"text\"\r\n                placeholder=\"Price\"\r\n                name=\"price\"\r\n                value={credentials.price}\r\n                onChange={handleInputChange}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input\r\n                className='input__file'\r\n                type=\"file\"\r\n                name=\"imageFileName\"\r\n                accept=\"image/*\"\r\n                onChange={handleFileChange}/>\r\n            </div>\r\n                <button onClick={handleAddVacation}>Add Vacation</button>\r\n                <button className=\"return-btn\" onClick={() => navigate('/admin')}>\r\n              Return\r\n            </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</>\r\n  );\r\n  \r\n}\r\n\r\nexport default AddVacation;\r\n","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HolidaysPage\\HolidaysPage.tsx",["89","90","91"],[],"import React, { FC, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport HolidayCard from './HolidayCard';\r\nimport CustomPagination from './Pagination';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFilterCircleXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport Swal from 'sweetalert2';\r\nimport Nav from '../Nav/Nav';\r\nimport { Console } from 'console';\r\n\r\n\r\ninterface Vacation {\r\n  vacation_id: number;\r\n  vacation_description: string;\r\n  vacation_start: string;\r\n  vacation_end: string;\r\n  price: number;\r\n  vacation_image_file_name: string;\r\n  vacation_image_url: string;\r\n  isFollowed: boolean;\r\n  startDate: string;\r\n  endDate: string;\r\n  vacation_destination: string;\r\n  follower_count: number;\r\n  userId: number;\r\n}\r\n\r\ninterface UserData {\r\n  userId: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nconst HolidayPage: FC = () => {\r\n    const navigate = useNavigate();\r\n    const [vacations, setVacations] = useState<Vacation[]>([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [itemsPerPage] = useState(10);\r\n    const [sortByStartDate, setSortByStartDate] = useState(true);\r\n    const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);\r\n    const [followedVacations, setFollowedVacations] = useState<Vacation[]>([]);\r\n    const [filter, setFilter] = useState<string | null>(null);\r\n    const [report, setReport] = useState<number>(0);\r\n\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        const role = localStorage.getItem('role');\r\n      \r\n        if (token && role === 'regular') {\r\n          fetchUserData()\r\n            .then((userData) => {\r\n              if (userData) {\r\n                setLoggedInUser(userData);\r\n                fetchFollowedVacations(userData.userId);\r\n              } else {\r\n                console.error('User data is null');\r\n                navigate('/');\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error('Error fetching user data:', error);\r\n              navigate('/');\r\n            });\r\n        } else {\r\n          navigate('/');\r\n        }\r\n    }, [navigate]);\r\n    \r\n    useEffect(() => {\r\n      if (loggedInUser) {\r\n        fetchVacations();\r\n        fetchReport();\r\n        fetchFollowedVacations(loggedInUser.userId);\r\n      }\r\n    }, [loggedInUser]);\r\n      \r\n    const fetchUserData = async (): Promise<UserData | null> => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n\r\n        const response = await fetch('http://localhost:3000/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user data');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (error) {\r\n        console.error('Failed to fetch user data', error);\r\n        return null;\r\n      }\r\n    };\r\n  \r\n\r\n  \r\n  const fetchVacations = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n  \r\n      const response = await fetch('http://localhost:3000/vacations', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        const error = await response.text();\r\n        throw new Error(`Fetch failed: ${error}`);\r\n      }\r\n      let data = await response.json();\r\n      setVacations(data);\r\n\r\n    } catch (error) {\r\n      console.error('Failed to fetch vacations', error);\r\n    }\r\n    };\r\n\r\n  const fetchReport = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      const response = await fetch('http://localhost:3000/report', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        const error = await response.text();\r\n        throw new Error(`Fetch failed: ${error}`);\r\n      }\r\n      const data = await response.json();\r\n      setVacations(data);\r\n      const reportValue = data ? data : 0;\r\n      setReport(reportValue);\r\n\r\n      console.log(reportValue);\r\n    } catch (error) {\r\n      console.error('Failed to fetch vacations', error);\r\n    }\r\n  };\r\n\r\n  const fetchFollowedVacations = async (userId: number) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!userId) {\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:3000/user/${userId}/followed`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const error = await response.text();\r\n          throw new Error(`Fetch failed: ${error}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setFollowedVacations(data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch followed vacations', error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    const userFollowVacation = async (userId: number, vacationId: number) => {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n        \r\n          const response = await fetch('http://localhost:3000/follow', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ user_id: userId, vacation_id: vacationId }),\r\n          });\r\n      \r\n          if (!response.ok) {\r\n            throw new Error('Failed to follow vacation');\r\n          }\r\n      \r\n          fetchReport();\r\n          fetchFollowedVacations(userId);\r\n        } catch (error) {\r\n          console.error('Failed to follow vacation', error);\r\n        }\r\n      };\r\n\r\n\r\n      \r\n      const unfollowVacation = async (userId: number, vacationId: number) => {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n        \r\n          const response = await fetch('http://localhost:3000/unfollow', {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ user_id: userId, vacation_id: vacationId }),\r\n          });\r\n      \r\n          if (!response.ok) {\r\n            throw new Error('Failed to unfollow vacation');\r\n          }\r\n          fetchReport();\r\n          fetchFollowedVacations(userId);\r\n        } catch (error) {\r\n          console.error('Failed to unfollow vacation', error);\r\n        }\r\n      };\r\n\r\n      const openFilterDialog = async () => {\r\n        const { value } = await Swal.fire({\r\n          title: 'Filter options',\r\n          input: 'select',\r\n          inputOptions: {\r\n            showAll: 'Show All',\r\n            showFollowed: 'Show Followed',\r\n            showNotStarted: 'Show Not Started',\r\n            showActive: 'Show Active'\r\n          },\r\n          inputPlaceholder: 'Select a filter',\r\n          showCancelButton: true,\r\n        });\r\n      \r\n        if (value) {\r\n          setFilter(value);\r\n        } else {\r\n          setFilter(null);\r\n        }\r\n      };\r\n      \r\n\r\n    const updatedVacations = vacations.map(vacation => ({\r\n        ...vacation,\r\n        isFollowed: followedVacations.some(followedVacation => followedVacation.vacation_id === vacation.vacation_id),\r\n    }));\r\n\r\n    const filteredVacations = updatedVacations.filter(vacation => {\r\n        switch (filter) {\r\n          case 'showFollowed':\r\n            return vacation.isFollowed;\r\n          case 'showNotStarted':\r\n            return new Date(vacation.vacation_start) > new Date();\r\n          case 'showActive':\r\n            return new Date(vacation.vacation_start) <= new Date() && new Date() <= new Date(vacation.vacation_end);\r\n          case 'showAll':\r\n          default:\r\n            return true;\r\n        }\r\n      });\r\n      \r\n\r\n    vacations.sort((a: Vacation, b: Vacation) => {\r\n        if (sortByStartDate) {\r\n            return new Date(a.vacation_start).getTime() - new Date(b.vacation_start).getTime();\r\n        } else {\r\n            return new Date(a.vacation_end).getTime() - new Date(b.vacation_end).getTime();\r\n        }\r\n    });\r\n\r\n    \r\n      const totalFilteredItems = filteredVacations.length; \r\n      const totalPages = Math.ceil(totalFilteredItems / itemsPerPage);\r\n      const adjustedCurrentPage = Math.min(currentPage, totalPages);\r\n      const indexOfLastItem = adjustedCurrentPage * itemsPerPage;\r\n      const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n      const currentItems = filteredVacations.slice(indexOfFirstItem, indexOfLastItem);\r\n      const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\r\n    \r\n      return (\r\n        <>\r\n        <Nav />\r\n        <div>\r\n            <div className=\"filter\">\r\n            <h3 onClick={openFilterDialog}>Filter <FontAwesomeIcon icon={faFilterCircleXmark} /></h3>\r\n\r\n            </div>\r\n\r\n            <div className=\"card-area\">\r\n                {currentItems.map((vacation, index) => (\r\n                    <HolidayCard\r\n                        key={index}\r\n                        holiday={vacation}\r\n                        followedVacations={followedVacations}\r\n                        userFollowVacation={userFollowVacation}\r\n                        unfollowVacation={unfollowVacation}\r\n                        loggedInUserId={loggedInUser ? loggedInUser.userId : 0}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <CustomPagination itemsPerPage={itemsPerPage} totalItems={totalFilteredItems} paginate={paginate} currentPage={adjustedCurrentPage} />\r\n        </div>\r\n        </>\r\n    );\r\n    \r\n};\r\n\r\nexport default HolidayPage;\r\n","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HolidaysPage\\Pagination.tsx",[],[],"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\AdminPage\\AdminCard.tsx",["92","93","94","95","96"],[],"import React, { FC, useEffect, useState } from 'react';\r\nimport '../HolidaysPage/HolidayCard.css';\r\nimport { AiOutlineHeart, AiFillHeart } from 'react-icons/ai';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalendar } from '@fortawesome/free-solid-svg-icons';\r\nimport  { faPenToSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport  { faX } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface Vacation {\r\n  vacation_id: number;\r\n  vacation_description: string;\r\n  vacation_start: string;\r\n  vacation_end: string;\r\n  price: number;\r\n  vacation_image_file_name: string;\r\n  vacation_image_url: string;\r\n  isFollowed: boolean;\r\n  startDate: string;\r\n  endDate: string;\r\n  vacation_destination: string;\r\n  follower_count: number;\r\n  userId: number;\r\n}\r\n\r\ninterface Holiday {\r\n  vacation_id: number;\r\n  vacation_description: string;\r\n  vacation_start: string;\r\n  vacation_end: string;\r\n  vacation_image_file_name: string;\r\n  vacation_destination: string;\r\n  price: number;\r\n  follower_count: number;\r\n  isFollowed: boolean;\r\n  \r\n}\r\n\r\ninterface AdminCardProps {\r\n  holiday: Vacation;\r\n  deleteCard: (holidayId: number) => void;\r\n  editCard: (holidayId: number) => void;\r\n}\r\n\r\n\r\n\r\nconst AdminCard: FC<AdminCardProps> = ({ holiday, deleteCard, editCard  }) => {    \r\n\r\n  const handleEditClick = () => {\r\n    editCard(holiday.vacation_id); // Pass the vacation_id to the editCard function\r\n  };\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n        <div className=\"card__image-container\">\r\n          <img\r\n            className=\"card__background\"\r\n            src={`http://localhost:3000/vacation_images/${holiday.vacation_image_file_name}`}\r\n            alt={holiday.vacation_description}\r\n          />\r\n          \r\n          <h2 className=\"card__title\">{holiday.vacation_destination}</h2>\r\n          <div className=\"card__delete\" onClick={() => deleteCard (holiday.vacation_id)}><FontAwesomeIcon  icon={faX} /></div>\r\n          <div className=\"card__icon\" onClick={() => handleEditClick ()}><FontAwesomeIcon  icon={faPenToSquare} /></div>\r\n          \r\n        </div>\r\n        <div className=\"card__content\">\r\n\r\n          <div className=\"card__hover-content\">\r\n            <div className=\"card__content-top\">\r\n                <p className=\"card__description\">{holiday.vacation_description}</p>\r\n                <p className=\"card__Followers\">Followers: {holiday.follower_count}</p>\r\n\r\n            </div>\r\n            <div className=\"card__content-bottom\">\r\n                <p className=\"card__Price\">Price: {holiday.price}$</p>\r\n\r\n                <div className=\"card__date-container\">\r\n                <FontAwesomeIcon className='card__date' icon={faCalendar} />\r\n                {new Date(holiday.vacation_start).toLocaleDateString()}-\r\n                {new Date(holiday.vacation_end).toLocaleDateString()}\r\n                </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      );\r\n      \r\n\r\n};\r\n\r\nexport default AdminCard;\r\n","C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\HolidaysPage\\HolidayCard.tsx",[],[],"C:\\Users\\olush\\Desktop\\לימודים\\HolidayPicker\\frontend\\src\\components\\Nav\\Nav.tsx",["97","98"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Nav.css\";\r\nimport logo from \"../../assets/logo.png\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHand } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faRightFromBracket } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\ninterface UserData {\r\n    first_name: string;\r\n    last_name: string;\r\n  }\r\n\r\n\r\nconst Nav = () => {\r\n\r\n    const Logout = () => {\r\n        localStorage.clear();\r\n        window.location.href = '/';\r\n    };\r\n\r\n\r\n    const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);\r\n\r\n\r\n    const fetchUserData = async (): Promise<UserData | null> => {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n  \r\n          const response = await fetch('http://localhost:3000/user', {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n  \r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch user data');\r\n          }\r\n  \r\n          const data = await response.json();\r\n          return data;\r\n        } catch (error) {\r\n          console.error('Failed to fetch user data', error);\r\n          return null;\r\n        }\r\n      };\r\n   \r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n      \r\n        if (token) {\r\n          fetchUserData()\r\n            .then((userData) => {\r\n              if (userData) {\r\n                setLoggedInUser(userData);\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error('Error fetching user data:', error);\r\n            });\r\n        }\r\n        }, []);\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li>\r\n            {loggedInUser && <span>Hello {loggedInUser.first_name} {loggedInUser.last_name} <FontAwesomeIcon icon={faHand} /></span>}\r\n        </li>\r\n     \r\n        <li>\r\n           <span className=\"logOut\" onClick={Logout}>Logout <FontAwesomeIcon icon={faRightFromBracket} /></span>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n",{"ruleId":"99","severity":1,"message":"100","line":10,"column":11,"nodeType":"101","messageId":"102","endLine":10,"endColumn":18},{"ruleId":"99","severity":1,"message":"103","line":53,"column":12,"nodeType":"101","messageId":"102","endLine":53,"endColumn":29},{"ruleId":"99","severity":1,"message":"104","line":53,"column":31,"nodeType":"101","messageId":"102","endLine":53,"endColumn":51},{"ruleId":"99","severity":1,"message":"105","line":54,"column":29,"nodeType":"101","messageId":"102","endLine":54,"endColumn":47},{"ruleId":"99","severity":1,"message":"106","line":55,"column":12,"nodeType":"101","messageId":"102","endLine":55,"endColumn":18},{"ruleId":"99","severity":1,"message":"107","line":4,"column":8,"nodeType":"101","messageId":"102","endLine":4,"endColumn":11},{"ruleId":"99","severity":1,"message":"108","line":31,"column":10,"nodeType":"101","messageId":"102","endLine":31,"endColumn":22},{"ruleId":"109","severity":1,"message":"110","line":69,"column":6,"nodeType":"111","endLine":69,"endColumn":16,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"110","line":103,"column":6,"nodeType":"111","endLine":103,"endColumn":27,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"114","line":212,"column":9,"nodeType":"101","messageId":"102","endLine":212,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":322,"column":19,"nodeType":"117","endLine":322,"endColumn":77},{"ruleId":"99","severity":1,"message":"108","line":22,"column":10,"nodeType":"101","messageId":"102","endLine":22,"endColumn":22},{"ruleId":"99","severity":1,"message":"107","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":11},{"ruleId":"99","severity":1,"message":"108","line":25,"column":10,"nodeType":"101","messageId":"102","endLine":25,"endColumn":22},{"ruleId":"99","severity":1,"message":"118","line":9,"column":10,"nodeType":"101","messageId":"102","endLine":9,"endColumn":17},{"ruleId":"99","severity":1,"message":"105","line":41,"column":29,"nodeType":"101","messageId":"102","endLine":41,"endColumn":47},{"ruleId":"99","severity":1,"message":"106","line":45,"column":12,"nodeType":"101","messageId":"102","endLine":45,"endColumn":18},{"ruleId":"99","severity":1,"message":"119","line":1,"column":21,"nodeType":"101","messageId":"102","endLine":1,"endColumn":30},{"ruleId":"99","severity":1,"message":"120","line":1,"column":32,"nodeType":"101","messageId":"102","endLine":1,"endColumn":40},{"ruleId":"99","severity":1,"message":"121","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":24},{"ruleId":"99","severity":1,"message":"122","line":3,"column":26,"nodeType":"101","messageId":"102","endLine":3,"endColumn":37},{"ruleId":"99","severity":1,"message":"100","line":25,"column":11,"nodeType":"101","messageId":"102","endLine":25,"endColumn":18},{"ruleId":"99","severity":1,"message":"123","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":14},{"ruleId":"99","severity":1,"message":"124","line":4,"column":8,"nodeType":"101","messageId":"102","endLine":4,"endColumn":12},"@typescript-eslint/no-unused-vars","'Holiday' is defined but never used.","Identifier","unusedVar","'followedVacations' is assigned a value but never used.","'setFollowedVacations' is assigned a value but never used.","'setSortByStartDate' is assigned a value but never used.","'report' is assigned a value but never used.","'Nav' is defined but never used.","'loggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchVacationDetails'. Either include it or remove the dependency array.","ArrayExpression",["125"],["126"],"'filename' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Console' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'AiOutlineHeart' is defined but never used.","'AiFillHeart' is defined but never used.","'Link' is defined but never used.","'logo' is defined but never used.",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [fetchVacationDetails, navigate]",{"range":"131","text":"132"},"Update the dependencies array to be: [fetchVacationDetails, holidayId, navigate]",{"range":"133","text":"134"},[1876,1886],"[fetchVacationDetails, navigate]",[2688,2709],"[fetchVacationDetails, holidayId, navigate]"]